goog.provide('iiiiioiooooo.core.test');
goog.require('cljs.core');
goog.require('clojure.zip');
iiiiioiooooo.core.test.test_exp2 = (function test_exp2(){
return cljs.core.with_meta(cljs.core.list(1,2,3,4),cljs.core.hash_map("\uFDD0'line",7,"\uFDD0'column",21));
});
iiiiioiooooo.core.test.test_exp = (function test_exp(){
return cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"zipper")),"Creates a new zipper structure.\n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"branch?")),(new cljs.core.Symbol(null,"children")),(new cljs.core.Symbol(null,"make-node")),(new cljs.core.Symbol(null,"root"))]),cljs.core.with_meta(cljs.core.vec([(new cljs.core.Symbol(null,"root")),null]),cljs.core.hash_map("\uFDD0'zip/make-node",(new cljs.core.Symbol(null,"make-node")),"\uFDD0'zip/children",(new cljs.core.Symbol(null,"children")),"\uFDD0'zip/branch?",(new cljs.core.Symbol(null,"branch?"))))),cljs.core.hash_map("\uFDD0'line",24,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"seq-zip")),"Returns a zipper for nested sequences, given a root sequence",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"root"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"zipper")),(new cljs.core.Symbol(null,"seq?")),(new cljs.core.Symbol(null,"identity")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"fn")),cljs.core.vec([(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"children"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),(new cljs.core.Symbol(null,"children")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"node"))),cljs.core.hash_map("\uFDD0'line",47,"\uFDD0'column",53))),cljs.core.hash_map("\uFDD0'line",47,"\uFDD0'column",33))),cljs.core.hash_map("\uFDD0'line",47,"\uFDD0'column",13)),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",45,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",41,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"vector-zip")),"Returns a zipper for nested vectors, given a root vector",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"root"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"zipper")),(new cljs.core.Symbol(null,"vector?")),(new cljs.core.Symbol(null,"seq")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"fn")),cljs.core.vec([(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"children"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"vec")),(new cljs.core.Symbol(null,"children"))),cljs.core.hash_map("\uFDD0'line",56,"\uFDD0'column",44)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"node"))),cljs.core.hash_map("\uFDD0'line",56,"\uFDD0'column",59))),cljs.core.hash_map("\uFDD0'line",56,"\uFDD0'column",33))),cljs.core.hash_map("\uFDD0'line",56,"\uFDD0'column",13)),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",54,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",50,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"xml-zip")),"Returns a zipper for xml elements (as from xml/parse),\n  given a root element",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"root"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"zipper")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"complement")),(new cljs.core.Symbol(null,"string?"))),cljs.core.hash_map("\uFDD0'line",64,"\uFDD0'column",13)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"comp")),(new cljs.core.Symbol(null,"seq")),"\uFDD0'content"),cljs.core.hash_map("\uFDD0'line",65,"\uFDD0'column",13)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"fn")),cljs.core.vec([(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"children"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"node")),"\uFDD0'content",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),(new cljs.core.Symbol(null,"children")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"apply")),(new cljs.core.Symbol(null,"vector")),(new cljs.core.Symbol(null,"children"))),cljs.core.hash_map("\uFDD0'line",67,"\uFDD0'column",50))),cljs.core.hash_map("\uFDD0'line",67,"\uFDD0'column",36))),cljs.core.hash_map("\uFDD0'line",67,"\uFDD0'column",15))),cljs.core.hash_map("\uFDD0'line",66,"\uFDD0'column",13)),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",64,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",59,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"node")),"Returns the node at loc",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loc")),0),cljs.core.hash_map("\uFDD0'line",73,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",70,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"branch?")),"Returns true if the node at loc is a branch",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\uFDD0'zip/branch?",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",79,"\uFDD0'column",20))),cljs.core.hash_map("\uFDD0'line",79,"\uFDD0'column",6)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",79,"\uFDD0'column",32))),cljs.core.hash_map("\uFDD0'line",79,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",75,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"children")),"Returns a seq of the children of node at loc, which must be a branch",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"branch?")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",85,"\uFDD0'column",9)),cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\uFDD0'zip/children",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",86,"\uFDD0'column",23))),cljs.core.hash_map("\uFDD0'line",86,"\uFDD0'column",8)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",86,"\uFDD0'column",35))),cljs.core.hash_map("\uFDD0'line",86,"\uFDD0'column",7)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"throw")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"Exception.")),"called children on a leaf node"),cljs.core.hash_map("\uFDD0'line",87,"\uFDD0'column",14))),cljs.core.hash_map("\uFDD0'line",87,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",85,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",81,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"make-node")),"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"children"))]),cljs.core.with_meta(cljs.core.list(cljs.core.with_meta(cljs.core.list("\uFDD0'zip/make-node",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",94,"\uFDD0'column",22))),cljs.core.hash_map("\uFDD0'line",94,"\uFDD0'column",6)),(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"children"))),cljs.core.hash_map("\uFDD0'line",94,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",89,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"path")),"Returns a seq of nodes leading to this loc",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list("\uFDD0'pnodes",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loc")),1),cljs.core.hash_map("\uFDD0'line",100,"\uFDD0'column",14))),cljs.core.hash_map("\uFDD0'line",100,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",96,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"lefts")),"Returns a seq of the left siblings of this loc",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"seq")),cljs.core.with_meta(cljs.core.list("\uFDD0'l",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loc")),1),cljs.core.hash_map("\uFDD0'line",106,"\uFDD0'column",14))),cljs.core.hash_map("\uFDD0'line",106,"\uFDD0'column",10))),cljs.core.hash_map("\uFDD0'line",106,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",102,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"rights")),"Returns a seq of the right siblings of this loc",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list("\uFDD0'r",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loc")),1),cljs.core.hash_map("\uFDD0'line",112,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",112,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",108,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"down")),"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"when")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"branch?")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",120,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"path"))]),(new cljs.core.Symbol(null,"loc")),cljs.core.vec([(new cljs.core.Symbol(null,"c")),(new cljs.core.Symbol(null,"&")),(new cljs.core.Symbol(null,"cnext")),"\uFDD0'as",(new cljs.core.Symbol(null,"cs"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"children")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",122,"\uFDD0'column",32))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"when")),(new cljs.core.Symbol(null,"cs")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([(new cljs.core.Symbol(null,"c")),cljs.core.hash_map("\uFDD0'l",cljs.core.vec([]),"\uFDD0'pnodes",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),(new cljs.core.Symbol(null,"path")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"conj")),cljs.core.with_meta(cljs.core.list("\uFDD0'pnodes",(new cljs.core.Symbol(null,"path"))),cljs.core.hash_map("\uFDD0'line",125,"\uFDD0'column",49)),(new cljs.core.Symbol(null,"node"))),cljs.core.hash_map("\uFDD0'line",125,"\uFDD0'column",43)),cljs.core.vec([(new cljs.core.Symbol(null,"node"))])),cljs.core.hash_map("\uFDD0'line",125,"\uFDD0'column",34)),"\uFDD0'ppath",(new cljs.core.Symbol(null,"path")),"\uFDD0'r",(new cljs.core.Symbol(null,"cnext")))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",127,"\uFDD0'column",37))),cljs.core.hash_map("\uFDD0'line",124,"\uFDD0'column",11))),cljs.core.hash_map("\uFDD0'line",123,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",121,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",120,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",115,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"up")),"Returns the loc of the parent of the node at this loc, or nil if at\n  the top",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"l")),"\uFDD0'l",(new cljs.core.Symbol(null,"ppath")),"\uFDD0'ppath",(new cljs.core.Symbol(null,"pnodes")),"\uFDD0'pnodes",(new cljs.core.Symbol(null,"r")),"\uFDD0'r",(new cljs.core.Symbol(null,"changed?")),"\uFDD0'changed?","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"when")),(new cljs.core.Symbol(null,"pnodes")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([(new cljs.core.Symbol(null,"pnode")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"peek")),(new cljs.core.Symbol(null,"pnodes"))),cljs.core.hash_map("\uFDD0'line",136,"\uFDD0'column",21))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),(new cljs.core.Symbol(null,"changed?")),cljs.core.vec([cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"make-node")),(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"pnode")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"concat")),(new cljs.core.Symbol(null,"l")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"cons")),(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"r"))),cljs.core.hash_map("\uFDD0'line",138,"\uFDD0'column",56))),cljs.core.hash_map("\uFDD0'line",138,"\uFDD0'column",46))),cljs.core.hash_map("\uFDD0'line",138,"\uFDD0'column",25)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),(new cljs.core.Symbol(null,"ppath")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"ppath")),"\uFDD0'changed?",true),cljs.core.hash_map("\uFDD0'line",139,"\uFDD0'column",36))),cljs.core.hash_map("\uFDD0'line",139,"\uFDD0'column",25))]),cljs.core.vec([(new cljs.core.Symbol(null,"pnode")),(new cljs.core.Symbol(null,"ppath"))])),cljs.core.hash_map("\uFDD0'line",137,"\uFDD0'column",22)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",141,"\uFDD0'column",22))),cljs.core.hash_map("\uFDD0'line",137,"\uFDD0'column",11))),cljs.core.hash_map("\uFDD0'line",136,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",135,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",134,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",129,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"root")),"zips all the way up and returns the root node, reflecting any\n changes.",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"=")),"\uFDD0'end",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loc")),1),cljs.core.hash_map("\uFDD0'line",148,"\uFDD0'column",17))),cljs.core.hash_map("\uFDD0'line",148,"\uFDD0'column",9)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",149,"\uFDD0'column",7)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([(new cljs.core.Symbol(null,"p")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"up")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",150,"\uFDD0'column",15))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),(new cljs.core.Symbol(null,"p")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"recur")),(new cljs.core.Symbol(null,"p"))),cljs.core.hash_map("\uFDD0'line",152,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",153,"\uFDD0'column",11))),cljs.core.hash_map("\uFDD0'line",151,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",150,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",148,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",143,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"right")),"Returns the loc of the right sibling of the node at this loc, or nil",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"l")),"\uFDD0'l",cljs.core.vec([(new cljs.core.Symbol(null,"r")),(new cljs.core.Symbol(null,"&")),(new cljs.core.Symbol(null,"rnext")),"\uFDD0'as",(new cljs.core.Symbol(null,"rs"))]),"\uFDD0'r","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"when")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),(new cljs.core.Symbol(null,"path")),(new cljs.core.Symbol(null,"rs"))),cljs.core.hash_map("\uFDD0'line",160,"\uFDD0'column",13)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([(new cljs.core.Symbol(null,"r")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'l",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"conj")),(new cljs.core.Symbol(null,"l")),(new cljs.core.Symbol(null,"node"))),cljs.core.hash_map("\uFDD0'line",161,"\uFDD0'column",38)),"\uFDD0'r",(new cljs.core.Symbol(null,"rnext"))),cljs.core.hash_map("\uFDD0'line",161,"\uFDD0'column",23))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",161,"\uFDD0'column",63))),cljs.core.hash_map("\uFDD0'line",161,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",160,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",159,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",155,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"rightmost")),"Returns the loc of the rightmost sibling of the node at this loc, or self",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"l")),"\uFDD0'l",(new cljs.core.Symbol(null,"r")),"\uFDD0'r","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),(new cljs.core.Symbol(null,"path")),(new cljs.core.Symbol(null,"r"))),cljs.core.hash_map("\uFDD0'line",168,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"last")),(new cljs.core.Symbol(null,"r"))),cljs.core.hash_map("\uFDD0'line",169,"\uFDD0'column",21)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'l",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"apply")),(new cljs.core.Symbol(null,"conj")),(new cljs.core.Symbol(null,"l")),(new cljs.core.Symbol(null,"node")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"butlast")),(new cljs.core.Symbol(null,"r"))),cljs.core.hash_map("\uFDD0'line",169,"\uFDD0'column",64))),cljs.core.hash_map("\uFDD0'line",169,"\uFDD0'column",45)),"\uFDD0'r",null),cljs.core.hash_map("\uFDD0'line",169,"\uFDD0'column",30))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",169,"\uFDD0'column",86))),cljs.core.hash_map("\uFDD0'line",169,"\uFDD0'column",9)),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",168,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",167,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",163,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"left")),"Returns the loc of the left sibling of the node at this loc, or nil",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"l")),"\uFDD0'l",(new cljs.core.Symbol(null,"r")),"\uFDD0'r","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"when")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),(new cljs.core.Symbol(null,"path")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"seq")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",177,"\uFDD0'column",23))),cljs.core.hash_map("\uFDD0'line",177,"\uFDD0'column",13)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"peek")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",178,"\uFDD0'column",21)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'l",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"pop")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",178,"\uFDD0'column",45)),"\uFDD0'r",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"cons")),(new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"r"))),cljs.core.hash_map("\uFDD0'line",178,"\uFDD0'column",56))),cljs.core.hash_map("\uFDD0'line",178,"\uFDD0'column",30))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",178,"\uFDD0'column",72))),cljs.core.hash_map("\uFDD0'line",178,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",177,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",176,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",172,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"leftmost")),"Returns the loc of the leftmost sibling of the node at this loc, or self",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"l")),"\uFDD0'l",(new cljs.core.Symbol(null,"r")),"\uFDD0'r","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),(new cljs.core.Symbol(null,"path")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"seq")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",185,"\uFDD0'column",21))),cljs.core.hash_map("\uFDD0'line",185,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"first")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",186,"\uFDD0'column",21)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'l",cljs.core.vec([]),"\uFDD0'r",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"concat")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"rest")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",186,"\uFDD0'column",60)),cljs.core.vec([(new cljs.core.Symbol(null,"node"))]),(new cljs.core.Symbol(null,"r"))),cljs.core.hash_map("\uFDD0'line",186,"\uFDD0'column",52))),cljs.core.hash_map("\uFDD0'line",186,"\uFDD0'column",31))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",186,"\uFDD0'column",81))),cljs.core.hash_map("\uFDD0'line",186,"\uFDD0'column",9)),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",185,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",184,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",180,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"insert-left")),"Inserts the item as the left sibling of the node at this loc,\n without moving",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"item"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"l")),"\uFDD0'l","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),(new cljs.core.Symbol(null,"http://www.freeger.com/projects/contextad/chrome.html")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"nil?")),(new cljs.core.Symbol(null,"path"))),cljs.core.hash_map("\uFDD0'line",195,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"throw")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"new")),(new cljs.core.Symbol(null,"Exception")),"Insert at top"),cljs.core.hash_map("\uFDD0'line",196,"\uFDD0'column",16))),cljs.core.hash_map("\uFDD0'line",196,"\uFDD0'column",9)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'l",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"conj")),(new cljs.core.Symbol(null,"l")),(new cljs.core.Symbol(null,"item"))),cljs.core.hash_map("\uFDD0'line",197,"\uFDD0'column",41)),"\uFDD0'changed?",true),cljs.core.hash_map("\uFDD0'line",197,"\uFDD0'column",26))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",197,"\uFDD0'column",72))),cljs.core.hash_map("\uFDD0'line",197,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",195,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",194,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",189,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"insert-right")),"Inserts the item as the right sibling of the node at this loc,\n  without moving",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"item"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"r")),"\uFDD0'r","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"nil?")),(new cljs.core.Symbol(null,"path"))),cljs.core.hash_map("\uFDD0'line",205,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"throw")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"new")),(new cljs.core.Symbol(null,"Exception")),"Insert at top"),cljs.core.hash_map("\uFDD0'line",206,"\uFDD0'column",16))),cljs.core.hash_map("\uFDD0'line",206,"\uFDD0'column",9)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'r",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"cons")),(new cljs.core.Symbol(null,"item")),(new cljs.core.Symbol(null,"r"))),cljs.core.hash_map("\uFDD0'line",207,"\uFDD0'column",41)),"\uFDD0'changed?",true),cljs.core.hash_map("\uFDD0'line",207,"\uFDD0'column",26))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",207,"\uFDD0'column",72))),cljs.core.hash_map("\uFDD0'line",207,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",205,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",204,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",199,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"replace")),"Replaces the node at this loc, without moving",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"node"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"_")),(new cljs.core.Symbol(null,"path"))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'changed?",true),cljs.core.hash_map("\uFDD0'line",214,"\uFDD0'column",24))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",214,"\uFDD0'column",53))),cljs.core.hash_map("\uFDD0'line",214,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",213,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",209,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"edit")),"Replaces the node at this loc with the value of (f node args)",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"f")),(new cljs.core.Symbol(null,"&")),(new cljs.core.Symbol(null,"args"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"replace")),(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"apply")),(new cljs.core.Symbol(null,"f")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",220,"\uFDD0'column",27)),(new cljs.core.Symbol(null,"args"))),cljs.core.hash_map("\uFDD0'line",220,"\uFDD0'column",18))),cljs.core.hash_map("\uFDD0'line",220,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",216,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"insert-child")),"Inserts the item as the leftmost child of the node at this loc,\n  without moving",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"item"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"replace")),(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"make-node")),(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",227,"\uFDD0'column",33)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"cons")),(new cljs.core.Symbol(null,"item")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"children")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",227,"\uFDD0'column",55))),cljs.core.hash_map("\uFDD0'line",227,"\uFDD0'column",44))),cljs.core.hash_map("\uFDD0'line",227,"\uFDD0'column",18))),cljs.core.hash_map("\uFDD0'line",227,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",222,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"append-child")),"Inserts the item as the rightmost child of the node at this loc,\n  without moving",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"item"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"replace")),(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"make-node")),(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",234,"\uFDD0'column",33)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"concat")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"children")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",234,"\uFDD0'column",52)),cljs.core.vec([(new cljs.core.Symbol(null,"item"))])),cljs.core.hash_map("\uFDD0'line",234,"\uFDD0'column",44))),cljs.core.hash_map("\uFDD0'line",234,"\uFDD0'column",18))),cljs.core.hash_map("\uFDD0'line",234,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",229,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"next")),"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"=")),"\uFDD0'end",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loc")),1),cljs.core.hash_map("\uFDD0'line",242,"\uFDD0'column",17))),cljs.core.hash_map("\uFDD0'line",242,"\uFDD0'column",9)),(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"or")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"branch?")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",245,"\uFDD0'column",13)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",245,"\uFDD0'column",27))),cljs.core.hash_map("\uFDD0'line",245,"\uFDD0'column",8)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",246,"\uFDD0'column",8)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loop")),cljs.core.vec([(new cljs.core.Symbol(null,"p")),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"up")),(new cljs.core.Symbol(null,"p"))),cljs.core.hash_map("\uFDD0'line",248,"\uFDD0'column",14)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"or")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"up")),(new cljs.core.Symbol(null,"p"))),cljs.core.hash_map("\uFDD0'line",249,"\uFDD0'column",23))),cljs.core.hash_map("\uFDD0'line",249,"\uFDD0'column",16)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"recur")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"up")),(new cljs.core.Symbol(null,"p"))),cljs.core.hash_map("\uFDD0'line",249,"\uFDD0'column",38))),cljs.core.hash_map("\uFDD0'line",249,"\uFDD0'column",31))),cljs.core.hash_map("\uFDD0'line",249,"\uFDD0'column",12)),cljs.core.vec([cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"p"))),cljs.core.hash_map("\uFDD0'line",250,"\uFDD0'column",13)),"\uFDD0'end"])),cljs.core.hash_map("\uFDD0'line",248,"\uFDD0'column",10))),cljs.core.hash_map("\uFDD0'line",247,"\uFDD0'column",8))),cljs.core.hash_map("\uFDD0'line",244,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",242,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",236,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"prev")),"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if-let")),cljs.core.vec([(new cljs.core.Symbol(null,"lloc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"left")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",257,"\uFDD0'column",19))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loop")),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"lloc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if-let")),cljs.core.vec([(new cljs.core.Symbol(null,"child")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"branch?")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",259,"\uFDD0'column",29)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",259,"\uFDD0'column",43))),cljs.core.hash_map("\uFDD0'line",259,"\uFDD0'column",24))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"recur")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"rightmost")),(new cljs.core.Symbol(null,"child"))),cljs.core.hash_map("\uFDD0'line",260,"\uFDD0'column",18))),cljs.core.hash_map("\uFDD0'line",260,"\uFDD0'column",11)),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",259,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",258,"\uFDD0'column",7)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"up")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",262,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",257,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",252,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"end?")),"Returns true if loc represents the end of a depth-first walk",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"=")),"\uFDD0'end",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loc")),1),cljs.core.hash_map("\uFDD0'line",268,"\uFDD0'column",13))),cljs.core.hash_map("\uFDD0'line",268,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",264,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"defn")),(new cljs.core.Symbol(null,"remove")),"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.",cljs.core.hash_map("\uFDD0'added","1.0"),cljs.core.vec([(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"let")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"node")),cljs.core.hash_map((new cljs.core.Symbol(null,"l")),"\uFDD0'l",(new cljs.core.Symbol(null,"ppath")),"\uFDD0'ppath",(new cljs.core.Symbol(null,"pnodes")),"\uFDD0'pnodes",(new cljs.core.Symbol(null,"rs")),"\uFDD0'r","\uFDD0'as",(new cljs.core.Symbol(null,"path")))]),(new cljs.core.Symbol(null,"loc"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"nil?")),(new cljs.core.Symbol(null,"path"))),cljs.core.hash_map("\uFDD0'line",276,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"throw")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"new")),(new cljs.core.Symbol(null,"Exception")),"Remove at top"),cljs.core.hash_map("\uFDD0'line",277,"\uFDD0'column",16))),cljs.core.hash_map("\uFDD0'line",277,"\uFDD0'column",9)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"pos?")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"count")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",278,"\uFDD0'column",19))),cljs.core.hash_map("\uFDD0'line",278,"\uFDD0'column",13)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loop")),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"peek")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",279,"\uFDD0'column",34)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"path")),"\uFDD0'l",cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"pop")),(new cljs.core.Symbol(null,"l"))),cljs.core.hash_map("\uFDD0'line",279,"\uFDD0'column",58)),"\uFDD0'changed?",true),cljs.core.hash_map("\uFDD0'line",279,"\uFDD0'column",43))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",279,"\uFDD0'column",83))),cljs.core.hash_map("\uFDD0'line",279,"\uFDD0'column",22))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if-let")),cljs.core.vec([(new cljs.core.Symbol(null,"child")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"branch?")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",280,"\uFDD0'column",33)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",280,"\uFDD0'column",47))),cljs.core.hash_map("\uFDD0'line",280,"\uFDD0'column",28))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"recur")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"rightmost")),(new cljs.core.Symbol(null,"child"))),cljs.core.hash_map("\uFDD0'line",281,"\uFDD0'column",22))),cljs.core.hash_map("\uFDD0'line",281,"\uFDD0'column",15)),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",280,"\uFDD0'column",13))),cljs.core.hash_map("\uFDD0'line",279,"\uFDD0'column",11)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"with-meta")),cljs.core.vec([cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"make-node")),(new cljs.core.Symbol(null,"loc")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"peek")),(new cljs.core.Symbol(null,"pnodes"))),cljs.core.hash_map("\uFDD0'line",283,"\uFDD0'column",38)),(new cljs.core.Symbol(null,"rs"))),cljs.core.hash_map("\uFDD0'line",283,"\uFDD0'column",23)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"and")),(new cljs.core.Symbol(null,"ppath")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"assoc")),(new cljs.core.Symbol(null,"ppath")),"\uFDD0'changed?",true),cljs.core.hash_map("\uFDD0'line",284,"\uFDD0'column",34))),cljs.core.hash_map("\uFDD0'line",284,"\uFDD0'column",23))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"meta")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",285,"\uFDD0'column",22))),cljs.core.hash_map("\uFDD0'line",283,"\uFDD0'column",11))),cljs.core.hash_map("\uFDD0'line",278,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",276,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",275,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",270,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"comment")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"load-file")),"/Users/rich/dev/clojure/src/zip.clj"),cljs.core.hash_map("\uFDD0'line",289,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"refer")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"zip")))),cljs.core.hash_map("\uFDD0'line",290,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"def")),(new cljs.core.Symbol(null,"data")),cljs.core.list((new cljs.core.Symbol(null,"quote")),cljs.core.vec([cljs.core.vec([(new cljs.core.Symbol(null,"a")),(new cljs.core.Symbol(null,"*")),(new cljs.core.Symbol(null,"b"))]),(new cljs.core.Symbol(null,"+")),cljs.core.vec([(new cljs.core.Symbol(null,"c")),(new cljs.core.Symbol(null,"*")),(new cljs.core.Symbol(null,"d"))])]))),cljs.core.hash_map("\uFDD0'line",291,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"def")),(new cljs.core.Symbol(null,"dz")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"vector-zip")),(new cljs.core.Symbol(null,"data"))),cljs.core.hash_map("\uFDD0'line",292,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",292,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"dz"))),cljs.core.hash_map("\uFDD0'line",294,"\uFDD0'column",28))),cljs.core.hash_map("\uFDD0'line",294,"\uFDD0'column",21))),cljs.core.hash_map("\uFDD0'line",294,"\uFDD0'column",14))),cljs.core.hash_map("\uFDD0'line",294,"\uFDD0'column",8))),cljs.core.hash_map("\uFDD0'line",294,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"lefts")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"dz"))),cljs.core.hash_map("\uFDD0'line",295,"\uFDD0'column",35))),cljs.core.hash_map("\uFDD0'line",295,"\uFDD0'column",28))),cljs.core.hash_map("\uFDD0'line",295,"\uFDD0'column",21))),cljs.core.hash_map("\uFDD0'line",295,"\uFDD0'column",15))),cljs.core.hash_map("\uFDD0'line",295,"\uFDD0'column",8))),cljs.core.hash_map("\uFDD0'line",295,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"rights")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"dz"))),cljs.core.hash_map("\uFDD0'line",296,"\uFDD0'column",36))),cljs.core.hash_map("\uFDD0'line",296,"\uFDD0'column",29))),cljs.core.hash_map("\uFDD0'line",296,"\uFDD0'column",22))),cljs.core.hash_map("\uFDD0'line",296,"\uFDD0'column",16))),cljs.core.hash_map("\uFDD0'line",296,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",296,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"up")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"up")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"dz"))),cljs.core.hash_map("\uFDD0'line",297,"\uFDD0'column",36))),cljs.core.hash_map("\uFDD0'line",297,"\uFDD0'column",29))),cljs.core.hash_map("\uFDD0'line",297,"\uFDD0'column",22))),cljs.core.hash_map("\uFDD0'line",297,"\uFDD0'column",16))),cljs.core.hash_map("\uFDD0'line",297,"\uFDD0'column",9))),cljs.core.hash_map("\uFDD0'line",297,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",297,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"path")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"dz"))),cljs.core.hash_map("\uFDD0'line",298,"\uFDD0'column",34))),cljs.core.hash_map("\uFDD0'line",298,"\uFDD0'column",27))),cljs.core.hash_map("\uFDD0'line",298,"\uFDD0'column",20))),cljs.core.hash_map("\uFDD0'line",298,"\uFDD0'column",14))),cljs.core.hash_map("\uFDD0'line",298,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",298,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"right")),(new cljs.core.Symbol(null,"right")),(new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"right"))),cljs.core.hash_map("\uFDD0'line",300,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"right")),(new cljs.core.Symbol(null,"right")),(new cljs.core.Symbol(null,"down")),(new cljs.core.Symbol(null,"right")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"replace")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"/")))),cljs.core.hash_map("\uFDD0'line",301,"\uFDD0'column",36)),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",301,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"edit")),(new cljs.core.Symbol(null,"str"))),cljs.core.hash_map("\uFDD0'line",302,"\uFDD0'column",18)),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"replace")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"/")))),cljs.core.hash_map("\uFDD0'line",302,"\uFDD0'column",44)),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",302,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"remove")),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",303,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"remove")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"insert-right")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"e")))),cljs.core.hash_map("\uFDD0'line",304,"\uFDD0'column",60)),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",304,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"remove")),(new cljs.core.Symbol(null,"up")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"append-child")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"e")))),cljs.core.hash_map("\uFDD0'line",305,"\uFDD0'column",63)),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",305,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"end?")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"remove")),(new cljs.core.Symbol(null,"next"))),cljs.core.hash_map("\uFDD0'line",307,"\uFDD0'column",7))),cljs.core.hash_map("\uFDD0'line",307,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"->")),(new cljs.core.Symbol(null,"dz")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"remove")),(new cljs.core.Symbol(null,"next")),(new cljs.core.Symbol(null,"remove")),(new cljs.core.Symbol(null,"root"))),cljs.core.hash_map("\uFDD0'line",309,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loop")),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"dz"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"end?")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",312,"\uFDD0'column",7)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"root")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",313,"\uFDD0'column",5)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"recur")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"next")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"=")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"*"))),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",314,"\uFDD0'column",28))),cljs.core.hash_map("\uFDD0'line",314,"\uFDD0'column",22)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"replace")),(new cljs.core.Symbol(null,"loc")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"/")))),cljs.core.hash_map("\uFDD0'line",315,"\uFDD0'column",20)),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",314,"\uFDD0'column",18))),cljs.core.hash_map("\uFDD0'line",314,"\uFDD0'column",12))),cljs.core.hash_map("\uFDD0'line",314,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",312,"\uFDD0'column",3))),cljs.core.hash_map("\uFDD0'line",311,"\uFDD0'column",1)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"loop")),cljs.core.vec([(new cljs.core.Symbol(null,"loc")),(new cljs.core.Symbol(null,"dz"))]),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"end?")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",319,"\uFDD0'column",7)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"root")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",320,"\uFDD0'column",5)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"recur")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"next")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"if")),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"=")),cljs.core.list((new cljs.core.Symbol(null,"quote")),(new cljs.core.Symbol(null,"*"))),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"node")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",321,"\uFDD0'column",28))),cljs.core.hash_map("\uFDD0'line",321,"\uFDD0'column",22)),cljs.core.with_meta(cljs.core.list((new cljs.core.Symbol(null,"remove")),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",322,"\uFDD0'column",20)),(new cljs.core.Symbol(null,"loc"))),cljs.core.hash_map("\uFDD0'line",321,"\uFDD0'column",18))),cljs.core.hash_map("\uFDD0'line",321,"\uFDD0'column",12))),cljs.core.hash_map("\uFDD0'line",321,"\uFDD0'column",5))),cljs.core.hash_map("\uFDD0'line",319,"\uFDD0'column",3))),cljs.core.hash_map("\uFDD0'line",318,"\uFDD0'column",1))),cljs.core.hash_map("\uFDD0'line",287,"\uFDD0'column",1))),cljs.core.hash_map("\uFDD0'line",10,"\uFDD0'column",6));
});

// Analyzer namespace snapshot:
cljs.core.swap_BANG_.call(null,cljs.core.namespaces,cljs.core.update_in,cljs.core.PersistentVector.fromArray([(new cljs.core.Symbol(null,"iiiiioiooooo.core.test"))], true),(function (old){
return cljs.core.deep_merge_with.call(null,(function() { 
var G__2801__delegate = function (m){
return cljs.core.first.call(null,m);
};
var G__2801 = function (var_args){
var m = null;
if (goog.isDef(var_args)) {
  m = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0),0);
} 
return G__2801__delegate.call(this, m);
};
G__2801.cljs$lang$maxFixedArity = 0;
G__2801.cljs$lang$applyTo = (function (arglist__2802){
var m = cljs.core.seq(arglist__2802);;
return G__2801__delegate(m);
});
G__2801.cljs$lang$arity$variadic = G__2801__delegate;
return G__2801;
})()
,cljs.core.hash_map("\uFDD0'defs",cljs.core.hash_map((new cljs.core.Symbol(null,"/")),cljs.core.hash_map("\uFDD0'name",(new cljs.core.Symbol(null,"cljs.core//"))),(new cljs.core.Symbol(null,"test-exp")),cljs.core.hash_map("\uFDD0'arglists",cljs.core.list((new cljs.core.Symbol(null,"quote")),cljs.core.list(cljs.core.vec([]))),"\uFDD0'method-params",cljs.core.list(cljs.core.vec([])),"\uFDD0'name",(new cljs.core.Symbol(null,"iiiiioiooooo.core.test/test-exp")),"\uFDD0'protocol-impl",null,"\uFDD0'max-fixed-arity",0,"\uFDD0'protocol-inline",null,"\uFDD0'variadic",false,"\uFDD0'line",9,"\uFDD0'fn-var",true,"\uFDD0'file","/Users/onto/projects/morse/srccljs/iiiiioiooooo/iiiiioiooooo/core/test.cljs"),(new cljs.core.Symbol(null,"test-exp2")),cljs.core.hash_map("\uFDD0'arglists",cljs.core.list((new cljs.core.Symbol(null,"quote")),cljs.core.list(cljs.core.vec([]))),"\uFDD0'method-params",cljs.core.list(cljs.core.vec([])),"\uFDD0'name",(new cljs.core.Symbol(null,"iiiiioiooooo.core.test/test-exp2")),"\uFDD0'protocol-impl",null,"\uFDD0'max-fixed-arity",0,"\uFDD0'protocol-inline",null,"\uFDD0'variadic",false,"\uFDD0'line",7,"\uFDD0'fn-var",true,"\uFDD0'file","/Users/onto/projects/morse/srccljs/iiiiioiooooo/iiiiioiooooo/core/test.cljs")),"\uFDD0'imports",null,"\uFDD0'uses-macros",null,"\uFDD0'requires",cljs.core.hash_map((new cljs.core.Symbol(null,"zip")),(new cljs.core.Symbol(null,"clojure.zip"))),"\uFDD0'uses",null,"\uFDD0'excludes",cljs.core.set([]),"\uFDD0'doc",null,"\uFDD0'name",(new cljs.core.Symbol(null,"iiiiioiooooo.core.test"))),old);
}));
